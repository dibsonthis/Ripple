const lib = load_lib("./bin/async")

type Future {
	_ptr: Pointer
}

const async = (fn: Function, args: List): Future => {
	const ptr = lib.call("async", [fn, args])
	Future {_ptr: ptr}
}

const async = (fn: Function): Future => {
	const ptr = lib.call("async", [fn, []])
	Future {_ptr: ptr}
}

const await = (future: Pointer) 
	=> lib.call("await", [future])

const isReady = (future: Pointer) 
	=> lib.call("is_ready", [future])

// extend Future {
// 	isReady: () => lib.call("is_ready", [self._ptr]),
// 	await: () => lib.call("await", [self._ptr]),
// }

extend Future {
	isReady: () => isReady(self._ptr),
	await: () => await(self._ptr),
}

