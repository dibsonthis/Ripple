const lib = load_lib("./bin/async")

type Future {
	//_ptr: Pointer
	_ref: Number
}

const async = (fn: Function, args: List): Future => {
	// const ptr = lib.call("async", [fn, args])
	// Future {_ptr: ptr}
	const ref = lib.call("async", [fn, args])
	Future {_ref: ref}
}

const async = (fn: Function): Future => {
	// const ptr = lib.call("async", [fn, []])
	// Future {_ptr: ptr}
	const ref = lib.call("async", [fn, []])
	Future {_ref: ref}
}

// const await = (future: Pointer) 
// 	=> lib.call("await", [future])

// const isReady = (future: Pointer) 
// 	=> lib.call("is_ready", [future])

const await = (future: Number) 
	=> lib.call("await", [future])

const isReady = (future: Number) 
	=> lib.call("is_ready", [future])


// extend Future {
// 	isReady: () => isReady(self._ptr),
// 	await: () => await(self._ptr),
// }

extend Future {
	isReady: () => isReady(self._ref),
	await: () => await(self._ref),
}

