const lib = load_lib("./bin/websockets", [
    "_client", "_run", "_client_close", "_send", 
    "_on_message", "_on_open", "_on_close", "_on_fail",
    "_server", "_listen", "_stop", "_server_send", "_server_broadcast", "_server_on_open", "_server_on_message", "_server_on_fail", "_server_on_close", "_server_get_clients", "_server_close_connection"])

/* Client */

const client = (url) => lib._client(url)
const close = (client) => lib._client_close(client)
const run = (client) => lib._run(client)
const send = (client, message) => lib._send(client, message)
const on_message = (client, function) => lib._on_message(client, function)
const on_open = (client, function) => lib._on_open(client, function)
const on_close = (client, function) => lib._on_close(client, function)
const on_fail = (client, function) => lib._on_fail(client, function)

type Client = (url) => {
    return {
        client: lib._client(url),
        reset: () => { 
            this.client = lib._client(url) 
            this.set_on_open(this.on_open)
            this.set_on_close(this.on_close)
            this.set_on_fail(this.on_fail)
            this.set_on_message(this.on_message)
            this.run()
        },
        reset_async: () => { 
            this.client = lib._client(url) 
            this.set_on_open(this.on_open)
            this.set_on_close(this.on_close)
            this.set_on_fail(this.on_fail)
            this.set_on_message(this.on_message)
            this.run_async()
        },
        close: () => lib._client_close(this.client),
        close_async: () => {
            lib._client_close(this.client)
            this._thread.get()
            this._thread = None
        },
        run: () => lib._run(this.client),
        _thread: None,
        run_async: () => {
            import [Future] : future
            const client = this.client
            const thread = Future(() => lib._run(client))
            this._thread = thread
        },
        send: (message) => lib._send(this.client, message),
        on_message: () => {},
        on_open: () => {},
        on_close: () => {},
        on_fail: () => {},
        set_on_message: (function) => {
            lib._on_message(this.client, function)
            this.on_message = function
        },
        set_on_open: (function) => {
            lib._on_open(this.client, function)
            this.on_open = function
        },
        set_on_close: (function) => {
            lib._on_close(this.client, function)
            this.on_close = function
        },
        set_on_fail: (function) => {
            lib._on_fail(this.client, function)
            this.on_fail = function
        },
    }
}

/* Server */

const server = () => lib._server()
const server_listen = (server, port) => lib._listen(server, port)
const server_stop = (server) => lib._stop(server)
const server_broadcast = (server, message) => lib._server_broadcast(server, message)
const server_send = (server, id, message) => lib._server_send(server, id, message)
const server_on_open = (server, function) => lib._server_on_open(server, function)
const server_on_message = (server, function) => lib._server_on_message(server, function)
const server_on_fail = (server, function) => lib._server_on_fail(server, function)
const server_on_close = (server, function) => lib._server_on_close(server, function)
const server_get_clients = (server) => lib._server_get_clients(server)
const server_close_connection = (server, id) => lib._server_close_connection(server, id)

type Server = () => {
    return {
        server: lib._server(),
        listen: (port) => {
            lib._listen(this.server, port)
            this._port = port
        },
        send: (id, message) => lib._server_send(this.server, id, message),
        broadcast: (message) => lib._server_broadcast(this.server, message),
        stop: () => lib._stop(this.server),
        set_on_message: (function) => {
            lib._server_on_message(this.server, function)
            this.on_message = function
        },
        set_on_open: (function) => {
            lib._server_on_open(this.server, function)
            this.on_open = function
        },
        set_on_close: (function) => {
            lib._server_on_close(this.server, function)
            this.on_close = function
        },
        set_on_fail: (function) => {
            lib._server_on_fail(this.server, function)
            this.on_fail = function
        },
        get_clients: () => lib._server_get_clients(this.server),
        close_connection: (id) => lib._server_close_connection(this.server, id),
        _thread: None,
        _port: 9002,
        on_message: () => {},
        on_open: () => {},
        on_close: () => {},
        on_fail: () => {},
        reset: () => { 
            this.server = lib._server() 
            this.set_on_open(this.on_open)
            this.set_on_close(this.on_close)
            this.set_on_fail(this.on_fail)
            this.set_on_message(this.on_message)
            this.listen(this._port)
        },
        reset_async: () => { 
            this.server = lib._server() 
            this.set_on_open(this.on_open)
            this.set_on_close(this.on_close)
            this.set_on_fail(this.on_fail)
            this.set_on_message(this.on_message)
            this.listen_async(this._port)
        },
        listen_async: (port) => {
            this._port = port
            import [Future] : future
            const server = this.server
            const thread = Future(() => lib._listen(server, port))
            this._thread = thread
        },
        stop_async: () => {
            lib._stop(this.server)
            this._thread.get()
            this._thread = None
        }
    }
}