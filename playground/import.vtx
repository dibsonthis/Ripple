/* Helpers */

const MatchArray = (a: List, b: List) 
    => a.map((e, i) => e is b[i]).reduce((a, b) => a && b)

/* Utility Types */

type Partial[T] = {

    if (T is Object) {
        var partial = {}

        for (T.keys(), i, k) {
            partial[k] = T[k] | None
        }

        ret partial
    }

    ret T
}

type NestedPartialObject[T: Object] = {
    var partial = {}
    for (T.keys(), i, k) {
        if (T[k] is Object) {
            partial[k] = NestedPartialObject(T[k]) | None
        } else {
            partial[k] = T[k] | None
        }
    }

    ret partial
}

type NestedPartial[T] = {
    if (T is Object) {
        ret NestedPartialObject(T)
    }

    T | None
}

type Readonly[T: Object] = {
	T as Const
}

type Record[Keys, Type] = {
    var obj = {}
    for (Keys as Iterator, i, k) {
        obj[string(k)] = Type
    }
    obj
}

type Exclude[T, U] = {
    T - U
}

type Extract[T, U] = {
    (T as Iterator).filter((E) => U is E) as Union
}

type KeyOf[T: Object] = T.keys() as Union

type ValueOf[T: Object] = T.values() as Union

type Pick[T, Keys: KeyOf(T)] = {
    var partial = {}

	for (T.keys(), i, k) {
        if (k in Keys) {
            partial[k] = T[k]
        }
	}

	partial
}

type Omit[T: Object, Keys: KeyOf(T)] = {
    var partial = {}

	for (T.keys(), i, k) {
        if (!(k in Keys)) {
            partial[k] = T[k]
        }
	}

	partial
}

type NonNullable[T] = T - None

type Nullable[T] = T | None

type Intersect[T: Object, U: Object] = {
    var partial = {}

	for (T.keys(), i, k) {
        partial[k] = T[k]
	}

    for (U.keys(), i, k) {
        partial[k] = U[k]
	}

	partial
}

type Common[T: Object, U: Object] = {
    var partial = {}

	for (T.keys(), i, k) {
        if (k in KeyOf(U)) {
            partial[k] = T[k]
        }
	}

	partial
}

type ReturnType[T: Function] = T.return

type Parameters[T: Function] = T.params

type Items[T: Object] = T.keys().map((k: String) => {
    { key: k as Literal, value: T[k] }
})

type Length[T: Object | String | List] = T.length() as Literal

type At[T: List, I: Number] = T[I] as Literal

type Get[T: Object, K: KeyOf(T)] = T[K] as Literal

type ListToObj[L: List] = {
    var obj = {}
    for (L, index, e) {
        obj[string(e)] = e as Literal
    }
    obj
}