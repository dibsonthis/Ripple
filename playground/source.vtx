type Partial(T) {
	var partial = {}

	for (T.keys, i, k) {
		partial[k] = union _ {T[k], None}
	}

	partial
}

type Record(Keys, Type) {
    var obj = {}
    for (Keys, i, k) {
        obj[string(k)] = Type
    }
    obj
}

type Exclude(T, U) {
    ret T - U
}

type Obj {
    name: String,
    age: Number
}

type PartialObj = Partial(Obj)

// const p: PartialObj = PartialObj {
//     name: None,
//     age: 56
// }

// println(p)

union Ids {1001, 1002, 1003, 1004}

type User {
    name: String = "",
    age: Number = 0
}

type Rec = Record(Ids, User)

const x: Rec = Rec {
    "1001": User {},
    "1002": User {},
    "1003": User {},
    "1004": User {},
}

println(x)

union SomeTypes {
    String,
    Number,
    Boolean,
    Rec
}

println(Exclude(SomeTypes, [Boolean, String, Rec]))