type Implements(T, FunctionName, F) {
    for (T.keys, index, key) {
        if (key == FunctionName) {
            if (T[key] is F) {
                ret T
            }
        }
    }

    None
}

type Blah {
    name: String,
    getName: () => String = () => this.name
}

const person = {
    name: "John",
    getName: () => this.name
}

print("here")

const blooop: Implements(Blah, "getName", () => String) = Blah {name: "John"}