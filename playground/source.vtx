type ValueOf[T: Object] = T.values().typeof() as Union

type User = {
    id: Number,
    firstName: String,
    lastName: String,
    email: String,
    phone: String | None
}

type Admin = {
    id: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String | None,
    level: Number
}

const admin = Admin {
    id: "0001",
    firstName: "John",
    lastName: "Smith",
    email: "js@test.com",
    phone: "0400000000",
    level: 1
}

const user = User {
    id: 10,
    firstName: "John",
    lastName: "Smith",
    email: "js@test.com",
    phone: "0400000000",
}

type ObjectMap[T: Object, V] = (obj: T, fn: ((v: ValueOf(T)) => V) | ((k: String, v: ValueOf(T)) => V)) => {
    var mapped: { V } = {}
    obj.keys().forEach((k) => {
        if (fn is (v: ValueOf(T)) => V) {
            mapped[k] = fn(obj[k])
        } else if (fn is (k: String, v: ValueOf(T)) => V) {
            mapped[k] = fn(k, obj[k])
        } else {
            println(V)
        }
    })
    mapped
}


println("here")

const map = ObjectMap(Admin, Number | String)

const anonAdmin = admin.map((v) => "*****")

const g: anonAdmin = {x: true}

println(anonAdmin)