import [Future] : future
import [sleep] : time

const cap = (num) => {
    if (num < 0) {
        return 0
    }
    return num
}

type Counter = (h = 0, m = 0, s = 0) => {
    s = cap(s)
    m = cap(m)
    h = cap(h)

    s::onChange((info) => {
        info.current = cap(info.current)
    })
    m::onChange((info) => {
        info.current = cap(info.current)
    })
    h::onChange((info) => {
        info.current = cap(info.current)
    })
    
    const counter = { 
        sec: s,
        min: m,
        hour: h,
        display: () => {
            var _sec = this.sec.string()
            var _min = this.min.string()
            var _hour = this.hour.string()

            if (this.sec < 10) {
                _sec = f"0${this.sec}"
            }

            if (this.min < 10) {
                _min = f"0${this.min}"
            }

            if (this.hour < 10) {
                _hour = f"0${this.hour}"
            }

            return f"${_hour}:${_min}:${_sec}"
        },
        paused: false,
        running: false,
        stop: () => {
            if (!this.running) {
                return
            }
            this.running = false
            this._future.wait_for()
        },
        pause: () => {
            this.paused = true
        },
        resume: () => {
            this.paused = false
        },
        reset: () => {
            this.sec = s
            this.min = m
            this.hour = h
            this.paused = false
        },
        set: (hour = 0, min = 0, sec = 0) => {
            this.sec = sec
            this.min = min
            this.hour = hour
        },
        _future: None,
        start: () => {
            if (this.running) {
                return
            }
            this.sec = s
            this.min = m
            this.hour = h
            this.running = true
            var counter_obj = this
            this._future = Future(() => {
                while (counter_obj.running) {
                    if (!counter_obj.paused) {
                        sleep(1000)
                        if (!counter_obj.paused) {
                            counter_obj.sec += 1
                            if (counter_obj.sec == 60) {
                                counter_obj.min += 1
                                counter_obj.sec = 0
                            }
                            if (counter_obj.min == 60) {
                                counter_obj.hour += 1
                                counter_obj.min = 0
                            }
                        }
                    }
                }
            })
        } 
    }

    return counter
}

const counter = Counter()
counter.start()