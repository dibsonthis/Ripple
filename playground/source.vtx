
type KeyOf[T: Object] = T.keys() as Union
type ValueOf[T: Object] = T.values().typeof() as Union

type Admin = {
    id: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String | None,
    level: Number
}

const admin = Admin {
    id: "0001",
    firstName: "John",
    lastName: "Smith",
    email: "js@test.com",
    phone: "0400000000",
    level: 1
}

println(admin)

type MapObject[T: Object] = (obj: T, fn: (k: KeyOf(T), v: ValueOf(T)) => Any) => {
    var mapped = {}
    obj.keys().map((k) => {
        mapped[k] = fn(k as KeyOf(obj), obj[k])
    })
    mapped
}

const AdminMap = MapObject(admin)

admin.AdminMap((k, v) => {
    if (v is String && k != "phone") {
        ret "_" + v + "_"
    }

    ret v
}).println()