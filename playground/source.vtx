// // Why doesn't the union type of functions work?

// type ObjectMap = (T: Object, fn: ((k: String, v: ValueOf(T)) => Any) | ((v: ValueOf(T)) => Any)) => {
//     var mapped = {}
//     T.keys().forEach((k) => {
//         if (fn.params.size() == 1) {
//             mapped[k] = fn(T[k])
//         } else {
//             mapped[k] = fn(k, T[k])
//         }
//     })
//     mapped
// }

import [] : string
import [] : io

type SomeType = (T: Object) => {
    "hello world".split()
    readf("")
    writef("h.txt", "g")
}

type T = SomeType({
    name: "John",
    age: 32
})

// const g: T = 0