type Topping = "cheese" | "bacon" | "pineapple" | "olives"
type Size = "s" | "m" | "l" | "xl"

var order_num = 0

type Burger = {
    toppings: [Topping] = [],
    size: Size = "s",
    meal: Boolean = false
}

type Pizza = {
    toppings: [Topping] = [],
    size: Size = "s",
    meal: Boolean = false
}

type Item = Burger | Pizza

type Order = {
    id: Number = order_num,
    item: Item,
    _init = () => {
        println(this)
        order_num += 1
    }
}

var orders: [Order] = []

type addTopping = (b: Item, t: Topping) => {
    b.toppings.append(t)
    b
}

type setSize = (b: Item, s: Size) => {
    b.size = s
    b
}

type setMeal = (b: Item, check: Boolean = true) => {
    b.meal = check
    b
}

type make = (item: Item | Pizza) => {
    const order = Order {
        item: item
    }

    orders.append(order)
}

(Burger {}).addTopping("cheese")
      .addTopping("bacon")
      .setSize("xl")
      .addTopping("pineapple")
      .setMeal()
      .make()

(Burger {}).addTopping("cheese")
      .addTopping("bacon")
      .setSize("m")
      .setMeal()
      .make()

(Pizza {}).addTopping("cheese")
      .setSize("s")
      .setMeal(false)
      .make()

const x: String = 0