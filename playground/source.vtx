
type KeyOf[T: Object] = T.keys() as Union
type ValueOf[T: Object] = T.values().typeof() as Union

type Admin = {
    id: String,
    firstName: String,
    lastName: String,
    email: String,
    phone: String | None,
    level: Number
}

const admin = Admin {
    id: "0001",
    firstName: "John",
    lastName: "Smith",
    email: "js@test.com",
    phone: "0400000000",
    level: 1
}

type ObjectMap = (T: Object, F: (x: ValueOf(T)) => Any) => {
    var obj = {}
    T.keys().map((k) => {
        obj[k] = F(T[k])
    })
    obj
}

println(admin.ObjectMap((x: ValueOf(admin)) => {
    if (x is String) {
        ret x + "_"
    } else if (x is Number) {
        ret x + 10
    } else {
        ret x
    }
}))