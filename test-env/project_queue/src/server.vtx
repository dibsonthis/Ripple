import requests
import [ContentType] : requests
import io
import json
import [] : string
import [Queue] : "modules/queue"

const host = "localhost"
const port = 1234

println(f"Server running on ${host}:${port}")

const server = requests.server()

/* SETTING UP QUEUE */

const NumQueue = Queue(Number)
const num_q = NumQueue {}

enum Tasks {
	exit: -1,
	forceExit: -2,
	show: 1,
	hehe: 69,
}

var processed_events = []

var batch_limit = 5

/* SETTING UP SERVER */

server.get("/", () => {
	io.readf("resources/example.html")
}, ContentType.html)

server.get("/queue", () => {
	f"
	<h2>Queue</h2>
	<p>${num_q.raw()}</p>
	<h2>Processed events</h2>
	<p>${processed_events}</p>
	"
}, ContentType.html)

server.post("/exit", (req) => {
	println("Stopping server, goodbye!")
	exit(0)
})

server.post("/queue", (req) => {
	const request = json.parse(req)
	const data = request.data

	if (data[0] == "L") {
		const split = data.split()
		if (split.length != 2) {
			println("Invalid limit, no changes made")
			ret {data: "limit_change_error"}
		}
		try {
			const limit_num = number(split[1])

			if (limit_num < 0) {
				error("")
			}

			println(f"Changing limit from ${batch_limit} to ${limit_num}")
			batch_limit = limit_num
		} catch(e) {
			println("Invalid limit, no changes made")
			ret {data: "limit_change_error"}
		}

		ret {data: "limit_change"}
	}

	var data_num = 0

	try {
		data_num = number(data)
	} catch (e) {
		println("Warning: Unable to parse to number - defaulting to 0")
	}

	// Check for immediate exit
	if (data_num == Tasks.forceExit) {
		println("Stopping immediately, batched tasks before or after this call will not be processed")
		num_q.clear()
		ret { data: "exit" }
	}

	num_q.add(data_num)
	println("Adding to queue")

	if (num_q.size() > batch_limit) {
		while (!num_q.empty()) {
			const element = num_q.pop()
			if (element == Tasks.exit) {
				println("Stopping, batched tasks after this call will not be processed")
				num_q.clear()
				ret { data: "exit" }
			} else if (element == Tasks.show) {
				println(f"Queue: ${num_q.raw()}")
			} else if (element == Tasks.hehe) {
				println("Hehe")
			} else {
				println(f"Response: Invalid input: ${element}")
			}
			processed_events.append(element)
		}
	}
})

server.start(host, port)