import image

var interpolate = (value: Number, x0: Number, x1: Number, y0: Number, y1: Number): Number => {
	y0 + (value - x0) * ((y0 - y1)/(x0 - x1))
}

var width = 1000
var x = -0.65
var y = 0
var oldX = x
var oldY = y
var xRange = 3.4
var aspectRatio = 4/3
var precision = 20

var height = width / aspectRatio
var yRange = xRange / aspectRatio
var minX = x - xRange / 2
var maxX = x + xRange / 2
var minY = y - yRange / 2
var maxY = y + yRange / 2

var grid = []
var row = []

for (0..width) {
    row.append({r: 0, b: 0, g: 0})
}
for (0..height) {
    var _row = row
    grid.append(_row)
}

for (0..height, _row) {
    for (0..width, _col) {
        x = minX + _col * xRange / width
        y = maxY - _row * yRange / height
        oldX = x
        oldY = y

        var index = 0

        for (0..precision + 1, i) {
            index = i
            const a = x^2 - y^2 //real component of z^2
            const b = 2 * x * y //imaginary component of z^2
            x = a + oldX //real component of new z
            y = b + oldY //imaginary component of new z
            if ((x^2 + y^2) > 4) {
                break
            }
        }

        if (index < precision) {
            const distance = (index + 1) / (precision + 1)
            const interpol = interpolate(distance, x, y, 0, 255)
            grid[_row][_col].r = 100
            grid[_row][_col].g = 55
            grid[_row][_col].b = interpol
        } else {
            const interpol = interpolate(precision, x, y, 0, 255)
            grid[_row][_col].r = 10
            grid[_row][_col].g = index
            grid[_row][_col].b = interpol
        }

        index = _row * width + _col + 1

        println(f"${index}/${width * height} - ${(index / width / height * 100 * 10) / 10}%")
    }
}

image.write("../output/mandelbrot_output.png", grid)
