import [split, trim] : string

const substring = (str: String, start: Number, end: Number): String => {
	var substr = ""
	const _str = str
	for (start..end, index, value) {
		substr += _str[value]
	}
	ret substr
}
const startsWith = (str: String, str_match: String): Boolean => str.substring(0, str_match.length) == str_match
const endsWith = (str: String, str_match: String): Boolean => str.substring(str.length-str_match.length, str.length) == str_match
const last = (x: [Any]) => x[x.length-1]

const assert = (conditional, message: String) => {
	if (!conditional) {
		error(f"Assertion Error - ${message}")
	}
}

const assert = (conditional) => {
	if (!conditional) {
		error("Assertion Error")
	}
}

const shouldBe = (received, expected) => {
	if (received != expected) {
		error(f"ShouldBe Error - Expected '${expected}', received '${received}'")
	}
}

const shouldNotBe = (received, expected) => {
	if (received == expected) {
		error(f"ShouldNotBe Error - Expected '${expected}', received '${received}'")
	}
}

const runTest = (test) => {
	var res = {
		passed: false,
		error: ""
	}
	try {
		test()
		res.passed = true
	} catch (e) {
		res.passed = false
		res.error = e.split(":").last().trim()
	}
	ret res
}

const runTests = (tests) => {
	var passed = []
	var failed = []

	const num_tests = tests.length
	print("\n")
	for (tests, index, test) {
		print(f"Running test: ${test.name}")
		const res = runTest(test.test)
		if (res.passed) {
			println(" - Passed")
			passed.append(test.name)
		} else {
			println(" - Failed")
			failed.append({name: test.name, error: res.error})
		}
	}

	ret { passed: passed, failed: failed, percentage_passed: (passed.length/num_tests) * 100 }
}